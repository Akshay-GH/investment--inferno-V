import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Navbar from '../components/Navbar';
import StarBackground from '../components/StarBackground';
import ErrorBoundary from '../components/ErrorBoundary';
import CandleStickChart from "../components/CandleStickChart";
import BG from '../assets/BgInferno.svg';
import { 
    ArrowUp, 
    ArrowDown, 
    Info,
  } from 'lucide-react';

const StockChart = () => {
  const { symbol } = useParams();
  const navigate = useNavigate();

  const [stockSymbol, setStockSymbol] = useState();
  const [quantity, setQuantity] = useState("");
  const [orderType, setOrderType] = useState("market");
  const [price, setPrice] = useState("");
  const [userBalance, setUserBalance] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [csrfReady, setCsrfReady] = useState(false);

  // Initialize CSRF token when component mounts
  useEffect(() => {
    const initializeCSRF = async () => {
      try {
        const response = await fetch('http://20.193.151.222:8000/get_csrf/', {
          method: 'GET',
          credentials: 'include',
          headers: {
            'Origin': 'http://localhost:5173'
          }
        });

        if (!response.ok) {
          throw new Error('Failed to get CSRF token');
        }

        setCsrfReady(true);
      } catch (error) {
        console.error('CSRF initialization error:', error);
        alert('Failed to initialize security token. Please refresh the page.');
      }
    };

    initializeCSRF();
  }, []);

  const handleTrade = async (action) => {
    if (!csrfReady) {
      alert('Security token not ready. Please wait...');
      return;
    }

    // Input validation
    if (!stockSymbol || !quantity) {
      alert("Please select a stock and enter quantity");
      return;
    }

    const qty = parseInt(quantity);
    if (isNaN(qty) || qty <= 0) {
      alert("Please enter a valid quantity");
      return;
    }

    if (orderType === "limit" && (!price || isNaN(parseFloat(price)))) {
      alert("Please enter a valid price for limit order");
      return;
    }

    setIsLoading(true);

    try {
      // Get CSRF token from cookies
      const csrfToken = document.cookie
        .split('; ')
        .find(row => row.startsWith('csrftoken='))
        ?.split('=')[1];

      if (!csrfToken) {
        throw new Error("Security token missing. Please refresh the page.");
      }

      // Prepare form data
      const formData = new URLSearchParams();
      formData.append('stock_symbol', stockSymbol);
      formData.append('quantity', qty);
      formData.append('order_type', orderType);
      formData.append('action', action);
      if (orderType === "limit") formData.append('price', price);

      // Make the trade request
      const response = await fetch("http://20.193.151.222:8000/place_order/", {
        method: "POST",
        credentials: 'include',
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          "X-CSRFToken": csrfToken,
          "Origin": "http://localhost:5173"
        },
        body: formData
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Trade failed");
      }

      // Update UI with response data
      setUserBalance(data.balance);
      alert(`${action === 'buy' ? 'Purchase' : 'Sale'} successful: ${data.quantity} shares of ${data.stock} at $${data.price.toFixed(2)}`);

    } catch (error) {
      console.error("Trade error:", error);
      alert(`Error: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen w-full overflow-x-hidden bg-background"
      style={{ backgroundImage: `url(${BG})`, backgroundSize: "cover", backgroundPosition: "center" }}>
      
      <StarBackground />
      <Navbar />

      <div className="max-w-7xl mx-auto px-4 sm:px-6 pt-28 pb-16 text-white">
        <div className="glass-panel p-6 rounded-xl backdrop-blur-xl border border-gray-700 mb-6">
          <h1 className="text-3xl font-bold mb-2">{stockSymbol || 'Select Stock'}</h1>
          <div className="flex items-center gap-2">
            <span className="text-xl">$420.69</span>
            <span className="text-green-500 flex items-center">
              +2.5% <ArrowUp className="ml-1" size={16} />
            </span>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <div className="glass-panel p-6 rounded-xl backdrop-blur-xl border border-gray-700 h-[600px]">
              <ErrorBoundary>
                <CandleStickChart 
                  height="100%"
                  upColor="#4CAF50"
                  downColor="#FF5252"
                  showTooltip={true}
                />
              </ErrorBoundary>
            </div>
          </div>

          <div className="lg:col-span-1">
            <div className="glass-panel p-6 rounded-xl backdrop-blur-xl border border-gray-700">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Stock</label>
                  <select
                    value={stockSymbol}
                    onChange={(e) => setStockSymbol(e.target.value)}
                    className="w-full bg-gray-800 border border-gray-700 rounded-md p-2 text-white"
                  >
                    <option value="">Select Stock</option>
                    <option value="MSFT">Microsoft (MSFT)</option>
                    <option value="AAPL">Apple (AAPL)</option>
                    <option value="GOOGL">Alphabet (GOOGL)</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-1">Quantity</label>
                  <input
                    type="number"
                    placeholder="0"
                    value={quantity}
                    onChange={(e) => setQuantity(e.target.value)}
                    min="1"
                    className="w-full bg-gray-800 border border-gray-700 rounded-md p-2 text-white"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-1">Order Type</label>
                  <select
                    value={orderType}
                    onChange={(e) => setOrderType(e.target.value)}
                    className="w-full bg-gray-800 border border-gray-700 rounded-md p-2 text-white"
                  >
                    <option value="market">Market Order</option>
                    <option value="limit">Limit Order</option>
                  </select>
                </div>

                {orderType === "limit" && (
                  <div>
                    <label className="block text-sm font-medium mb-1">Limit Price</label>
                    <input
                      type="number"
                      placeholder="0.00"
                      value={price}
                      onChange={(e) => setPrice(e.target.value)}
                      min="0.01"
                      step="0.01"
                      className="w-full bg-gray-800 border border-gray-700 rounded-md p-2 text-white"
                    />
                  </div>
                )}

                <div className="flex gap-2 pt-2">
                  <button
                    onClick={() => handleTrade("buy")}
                    disabled={isLoading}
                    className={`flex-1 py-2 rounded-md font-medium ${isLoading ? 'bg-gray-600' : 'bg-green-600 hover:bg-green-700'}`}
                  >
                    {isLoading ? 'Processing...' : 'Buy'}
                  </button>
                  <button
                    onClick={() => handleTrade("sell")}
                    disabled={isLoading}
                    className={`flex-1 py-2 rounded-md font-medium ${isLoading ? 'bg-gray-600' : 'bg-red-600 hover:bg-red-700'}`}
                  >
                    {isLoading ? 'Processing...' : 'Sell'}
                  </button>
                </div>

                <div className="pt-4 border-t border-gray-700">
                  <div className="flex justify-between">
                    <span className="text-gray-400">Available Balance:</span>
                    <span className="font-medium">${userBalance.toFixed(2)}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default StockChart;